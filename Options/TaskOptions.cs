using Services;
using DataAccess.Entities;

namespace Options
{

    public class AddTaskOption : IMenuOption
    {
        private readonly TaskService _taskService;

        public string Name => "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É";

        public AddTaskOption(TaskService taskService)
        {
            _taskService = taskService;
        }

        public void Execute()
        {
            Console.Clear();
            Console.Write("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ");
            var title = Console.ReadLine() ?? "";
            Console.Write("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ");
            var desciption = Console.ReadLine() ?? "...";

            var task = new AppTask
            {
                Title = title,
                Description = desciption,
                IsCompleted = false,
                CreatedAt = DateTime.Now
            };

            _taskService.CreateTask(task);

            Console.WriteLine(ConsoleStyler.Green("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"));
        }
    }
    public class DeleteTaskOption : IMenuOption
    {
        private readonly TaskService _taskService;
        private readonly TaskConsoleView _taskConsoleView;

        public string Name => "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É";

        public DeleteTaskOption(TaskService taskService, TaskConsoleView taskConsoleView)
        {
            _taskService = taskService;
            _taskConsoleView = taskConsoleView;
        }

        public void Execute()
        {
            Console.Clear();
            int? idToDelete = _taskConsoleView.SelectTaskId("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
            if (idToDelete.HasValue)
            {
                if (_taskService.DeleteTask(idToDelete.Value))
                {
                    Console.WriteLine(ConsoleStyler.Green("\n‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"));
                }
                else
                {
                    Console.WriteLine(ConsoleStyler.Red($"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞)."));
                }
            }
        }
    }
    public class MarkAsCompletedOption : IMenuOption
    {
        private readonly TaskService _taskService;
        private readonly TaskConsoleView _taskConsoleView;
        public string Name => "–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é";
        public MarkAsCompletedOption(TaskService taskService, TaskConsoleView taskConsoleView)
        {
            _taskService = taskService;
            _taskConsoleView = taskConsoleView;
        }
        public void Execute()
        {
            Console.Clear();
            int? idToMarkAsCompleted = _taskConsoleView.SelectTaskId("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏", allTasks: false);
            if (idToMarkAsCompleted.HasValue)
            {

                if (_taskService.MarkAsCompleted(idToMarkAsCompleted.Value))
                {
                    Console.WriteLine(ConsoleStyler.Green("\n‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–∞!"));
                }
                else
                {
                    Console.WriteLine(ConsoleStyler.Red($"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ—á–µ–Ω–∞)."));
                }
            }
        }

    }
    public class ListTasksOption : IMenuOption
    {
        private readonly TaskConsoleView _taskConsoleView;

        public string Name => "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á";
        public ListTasksOption(TaskConsoleView taskConsoleView)
        {
            _taskConsoleView = taskConsoleView;
        }
        public void Execute()
        {
            Console.Clear();
            Console.WriteLine("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n");
            _taskConsoleView.DisplayAllTasks();
        }

    }
}